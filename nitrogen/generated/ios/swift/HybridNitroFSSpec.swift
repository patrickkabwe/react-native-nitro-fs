///
/// HybridNitroFSSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroFSSpec``
public protocol HybridNitroFSSpec_protocol: HybridObject {
  // Properties
  var BUNDLE_DIR: String { get }
  var DOCUMENT_DIR: String { get }
  var CACHE_DIR: String { get }
  var DOWNLOAD_DIR: String { get }

  // Methods
  func exists(path: String) throws -> Promise<Bool>
  func writeFile(path: String, data: String, encoding: NitroFileEncoding) throws -> Promise<Void>
  func readFile(path: String, encoding: NitroFileEncoding) throws -> Promise<String>
  func copyFile(srcPath: String, destPath: String) throws -> Promise<Void>
  func copy(srcPath: String, destPath: String) throws -> Promise<Void>
  func unlink(path: String) throws -> Promise<Bool>
  func mkdir(path: String) throws -> Promise<Bool>
  func stat(path: String) throws -> Promise<NitroFileStat>
  func readdir(path: String) throws -> Promise<[String]>
  func rename(oldPath: String, newPath: String) throws -> Promise<Void>
  func dirname(path: String) throws -> String
  func basename(path: String, ext: String?) throws -> String
  func extname(path: String) throws -> String
  func uploadFile(file: NitroFile, uploadOptions: NitroUploadOptions, onProgress: ((_ uploadedBytes: Double, _ totalBytes: Double) -> Void)?) throws -> Promise<Void>
  func downloadFile(serverUrl: String, destinationPath: String, onProgress: ((_ downloadedBytes: Double, _ totalBytes: Double) -> Void)?) throws -> Promise<NitroFile>
}

/// See ``HybridNitroFSSpec``
open class HybridNitroFSSpec_base {
  private weak var cxxWrapper: HybridNitroFSSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridNitroFSSpec_cxx {
  #if DEBUG
    guard self is HybridNitroFSSpec else {
      fatalError("`self` is not a `HybridNitroFSSpec`! Did you accidentally inherit from `HybridNitroFSSpec_base` instead of `HybridNitroFSSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroFSSpec_cxx(self as! HybridNitroFSSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroFS HybridObject.
 * Implement this protocol to create Swift-based instances of NitroFS.
 * ```swift
 * class HybridNitroFS : HybridNitroFSSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroFSSpec = HybridNitroFSSpec_protocol & HybridNitroFSSpec_base
