///
/// JNitroUploadOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroUploadOptions.hpp"

#include "JNitroUploadMethod.hpp"
#include "NitroUploadMethod.hpp"
#include <optional>
#include <string>
#include <unordered_map>

namespace margelo::nitro::nitrofs {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroUploadOptions" and the the Kotlin data class "NitroUploadOptions".
   */
  struct JNitroUploadOptions final: public jni::JavaClass<JNitroUploadOptions> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofs/NitroUploadOptions;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroUploadOptions by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroUploadOptions toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldUrl = clazz->getField<jni::JString>("url");
      jni::local_ref<jni::JString> url = this->getFieldValue(fieldUrl);
      static const auto fieldMethod = clazz->getField<JNitroUploadMethod>("method");
      jni::local_ref<JNitroUploadMethod> method = this->getFieldValue(fieldMethod);
      static const auto fieldBody = clazz->getField<jni::JMap<jni::JString, jni::JString>>("body");
      jni::local_ref<jni::JMap<jni::JString, jni::JString>> body = this->getFieldValue(fieldBody);
      return NitroUploadOptions(
        url->toStdString(),
        method != nullptr ? std::make_optional(method->toCpp()) : std::nullopt,
        body != nullptr ? std::make_optional([&]() {
          std::unordered_map<std::string, std::string> __map;
          __map.reserve(body->size());
          for (const auto& __entry : *body) {
            __map.emplace(__entry.first->toStdString(), __entry.second->toStdString());
          }
          return __map;
        }()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroUploadOptions::javaobject> fromCpp(const NitroUploadOptions& value) {
      return newInstance(
        jni::make_jstring(value.url),
        value.method.has_value() ? JNitroUploadMethod::fromCpp(value.method.value()) : nullptr,
        value.body.has_value() ? [&]() -> jni::local_ref<jni::JMap<jni::JString, jni::JString>> {
          auto __map = jni::JHashMap<jni::JString, jni::JString>::create(value.body.value().size());
          for (const auto& __entry : value.body.value()) {
            __map->put(jni::make_jstring(__entry.first), jni::make_jstring(__entry.second));
          }
          return __map;
        }() : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitrofs
