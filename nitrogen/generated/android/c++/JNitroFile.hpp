///
/// JNitroFile.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroFile.hpp"

#include <string>

namespace margelo::nitro::nitrofs {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroFile" and the the Kotlin data class "NitroFile".
   */
  struct JNitroFile final: public jni::JavaClass<JNitroFile> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofs/NitroFile;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroFile by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroFile toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldName = clazz->getField<jni::JString>("name");
      jni::local_ref<jni::JString> name = this->getFieldValue(fieldName);
      static const auto fieldMimeType = clazz->getField<jni::JString>("mimeType");
      jni::local_ref<jni::JString> mimeType = this->getFieldValue(fieldMimeType);
      static const auto fieldPath = clazz->getField<jni::JString>("path");
      jni::local_ref<jni::JString> path = this->getFieldValue(fieldPath);
      return NitroFile(
        name->toStdString(),
        mimeType->toStdString(),
        path->toStdString()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroFile::javaobject> fromCpp(const NitroFile& value) {
      return newInstance(
        jni::make_jstring(value.name),
        jni::make_jstring(value.mimeType),
        jni::make_jstring(value.path)
      );
    }
  };

} // namespace margelo::nitro::nitrofs
