///
/// HybridNitroFSSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridNitroFSSpec.hpp"




namespace margelo::nitro::nitrofs {

  using namespace facebook;

  class JHybridNitroFSSpec: public jni::HybridClass<JHybridNitroFSSpec, JHybridObject>,
                            public virtual HybridNitroFSSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofs/HybridNitroFSSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridNitroFSSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridNitroFSSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridNitroFSSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;

  public:
    inline const jni::global_ref<JHybridNitroFSSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    std::string getBUNDLE_DIR() override;
    std::string getDOCUMENT_DIR() override;
    std::string getCACHE_DIR() override;
    std::string getDOWNLOAD_DIR() override;

  public:
    // Methods
    std::shared_ptr<Promise<bool>> exists(const std::string& path) override;
    std::shared_ptr<Promise<void>> writeFile(const std::string& path, const std::string& data, NitroFileEncoding encoding) override;
    std::shared_ptr<Promise<std::string>> readFile(const std::string& path, NitroFileEncoding encoding) override;
    std::shared_ptr<Promise<void>> copyFile(const std::string& srcPath, const std::string& destPath) override;
    std::shared_ptr<Promise<void>> copy(const std::string& srcPath, const std::string& destPath) override;
    std::shared_ptr<Promise<bool>> unlink(const std::string& path) override;
    std::shared_ptr<Promise<bool>> mkdir(const std::string& path) override;
    std::shared_ptr<Promise<NitroFileStat>> stat(const std::string& path) override;
    std::shared_ptr<Promise<std::vector<std::string>>> readdir(const std::string& path) override;
    std::shared_ptr<Promise<void>> rename(const std::string& oldPath, const std::string& newPath) override;
    std::string dirname(const std::string& path) override;
    std::string basename(const std::string& path, const std::optional<std::string>& ext) override;
    std::string extname(const std::string& path) override;
    std::shared_ptr<Promise<void>> uploadFile(const NitroFile& file, const NitroUploadOptions& uploadOptions, const std::optional<std::function<void(double /* uploadedBytes */, double /* totalBytes */)>>& onProgress) override;
    std::shared_ptr<Promise<NitroFile>> downloadFile(const std::string& serverUrl, const std::string& destinationPath, const std::optional<std::function<void(double /* downloadedBytes */, double /* totalBytes */)>>& onProgress) override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridNitroFSSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::nitrofs
