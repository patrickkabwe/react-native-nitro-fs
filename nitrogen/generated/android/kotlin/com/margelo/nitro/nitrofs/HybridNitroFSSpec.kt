///
/// HybridNitroFSSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.nitrofs

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*

/**
 * A Kotlin class representing the NitroFS HybridObject.
 * Implement this abstract class to create Kotlin-based instances of NitroFS.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridNitroFSSpec: HybridObject() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  @get:DoNotStrip
  @get:Keep
  abstract val BUNDLE_DIR: String
  
  @get:DoNotStrip
  @get:Keep
  abstract val DOCUMENT_DIR: String
  
  @get:DoNotStrip
  @get:Keep
  abstract val CACHE_DIR: String
  
  @get:DoNotStrip
  @get:Keep
  abstract val DOWNLOAD_DIR: String

  // Methods
  @DoNotStrip
  @Keep
  abstract fun exists(path: String): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun writeFile(path: String, data: String, encoding: NitroFileEncoding): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun readFile(path: String, encoding: NitroFileEncoding): Promise<String>
  
  @DoNotStrip
  @Keep
  abstract fun copyFile(srcPath: String, destPath: String): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun copy(srcPath: String, destPath: String): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun unlink(path: String): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun mkdir(path: String): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun stat(path: String): Promise<NitroFileStat>
  
  abstract fun uploadFile(file: NitroFile, uploadOptions: NitroUploadOptions, onProgress: ((uploadedBytes: Double, totalBytes: Double) -> Unit)?): Promise<Unit>
  
  @DoNotStrip
  @Keep
  private fun uploadFile_cxx(file: NitroFile, uploadOptions: NitroUploadOptions, onProgress: Func_void_double_double?): Promise<Unit> {
    val __result = uploadFile(file, uploadOptions, onProgress?.let { it })
    return __result
  }
  
  abstract fun downloadFile(serverUrl: String, destinationPath: String, onProgress: ((downloadedBytes: Double, totalBytes: Double) -> Unit)?): Promise<NitroFile>
  
  @DoNotStrip
  @Keep
  private fun downloadFile_cxx(serverUrl: String, destinationPath: String, onProgress: Func_void_double_double?): Promise<NitroFile> {
    val __result = downloadFile(serverUrl, destinationPath, onProgress?.let { it })
    return __result
  }

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridNitroFSSpec"
  }
}
