///
/// NitroFile.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::nitrofs {

  /**
   * A struct which can be represented as a JavaScript object (NitroFile).
   */
  struct NitroFile {
  public:
    std::string name     SWIFT_PRIVATE;
    std::string mimeType     SWIFT_PRIVATE;
    std::string path     SWIFT_PRIVATE;

  public:
    NitroFile() = default;
    explicit NitroFile(std::string name, std::string mimeType, std::string path): name(name), mimeType(mimeType), path(path) {}
  };

} // namespace margelo::nitro::nitrofs

namespace margelo::nitro {

  using namespace margelo::nitro::nitrofs;

  // C++ NitroFile <> JS NitroFile (object)
  template <>
  struct JSIConverter<NitroFile> final {
    static inline NitroFile fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return NitroFile(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "name")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "mimeType")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "path"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const NitroFile& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "name", JSIConverter<std::string>::toJSI(runtime, arg.name));
      obj.setProperty(runtime, "mimeType", JSIConverter<std::string>::toJSI(runtime, arg.mimeType));
      obj.setProperty(runtime, "path", JSIConverter<std::string>::toJSI(runtime, arg.path));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "name"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "mimeType"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "path"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
