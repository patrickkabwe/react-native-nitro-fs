///
/// NitroUploadOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `NitroUploadMethod` to properly resolve imports.
namespace margelo::nitro::nitrofs { enum class NitroUploadMethod; }

#include <string>
#include "NitroUploadMethod.hpp"
#include <optional>

namespace margelo::nitro::nitrofs {

  /**
   * A struct which can be represented as a JavaScript object (NitroUploadOptions).
   */
  struct NitroUploadOptions {
  public:
    std::string url     SWIFT_PRIVATE;
    std::optional<NitroUploadMethod> method     SWIFT_PRIVATE;
    std::optional<std::string> field     SWIFT_PRIVATE;

  public:
    NitroUploadOptions() = default;
    explicit NitroUploadOptions(std::string url, std::optional<NitroUploadMethod> method, std::optional<std::string> field): url(url), method(method), field(field) {}
  };

} // namespace margelo::nitro::nitrofs

namespace margelo::nitro {

  using namespace margelo::nitro::nitrofs;

  // C++ NitroUploadOptions <> JS NitroUploadOptions (object)
  template <>
  struct JSIConverter<NitroUploadOptions> final {
    static inline NitroUploadOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return NitroUploadOptions(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "url")),
        JSIConverter<std::optional<NitroUploadMethod>>::fromJSI(runtime, obj.getProperty(runtime, "method")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "field"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const NitroUploadOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "url", JSIConverter<std::string>::toJSI(runtime, arg.url));
      obj.setProperty(runtime, "method", JSIConverter<std::optional<NitroUploadMethod>>::toJSI(runtime, arg.method));
      obj.setProperty(runtime, "field", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.field));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "url"))) return false;
      if (!JSIConverter<std::optional<NitroUploadMethod>>::canConvert(runtime, obj.getProperty(runtime, "method"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "field"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
