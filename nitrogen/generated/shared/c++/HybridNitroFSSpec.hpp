///
/// HybridNitroFSSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `NitroFileEncoding` to properly resolve imports.
namespace margelo::nitro::nitrofs { enum class NitroFileEncoding; }
// Forward declaration of `NitroFileStat` to properly resolve imports.
namespace margelo::nitro::nitrofs { struct NitroFileStat; }
// Forward declaration of `NitroFile` to properly resolve imports.
namespace margelo::nitro::nitrofs { struct NitroFile; }
// Forward declaration of `NitroUploadOptions` to properly resolve imports.
namespace margelo::nitro::nitrofs { struct NitroUploadOptions; }

#include <string>
#include <NitroModules/Promise.hpp>
#include "NitroFileEncoding.hpp"
#include "NitroFileStat.hpp"
#include <vector>
#include <optional>
#include "NitroFile.hpp"
#include "NitroUploadOptions.hpp"
#include <functional>

namespace margelo::nitro::nitrofs {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `NitroFS`
   * Inherit this class to create instances of `HybridNitroFSSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridNitroFS: public HybridNitroFSSpec {
   * public:
   *   HybridNitroFS(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridNitroFSSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridNitroFSSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridNitroFSSpec() override = default;

    public:
      // Properties
      virtual std::string getBUNDLE_DIR() = 0;
      virtual std::string getDOCUMENT_DIR() = 0;
      virtual std::string getCACHE_DIR() = 0;
      virtual std::string getDOWNLOAD_DIR() = 0;

    public:
      // Methods
      virtual std::shared_ptr<Promise<bool>> exists(const std::string& path) = 0;
      virtual std::shared_ptr<Promise<void>> writeFile(const std::string& path, const std::string& data, NitroFileEncoding encoding) = 0;
      virtual std::shared_ptr<Promise<std::string>> readFile(const std::string& path, NitroFileEncoding encoding) = 0;
      virtual std::shared_ptr<Promise<void>> copyFile(const std::string& srcPath, const std::string& destPath) = 0;
      virtual std::shared_ptr<Promise<void>> copy(const std::string& srcPath, const std::string& destPath) = 0;
      virtual std::shared_ptr<Promise<bool>> unlink(const std::string& path) = 0;
      virtual std::shared_ptr<Promise<bool>> mkdir(const std::string& path) = 0;
      virtual std::shared_ptr<Promise<NitroFileStat>> stat(const std::string& path) = 0;
      virtual std::shared_ptr<Promise<std::vector<std::string>>> readdir(const std::string& path) = 0;
      virtual std::shared_ptr<Promise<void>> rename(const std::string& oldPath, const std::string& newPath) = 0;
      virtual std::string dirname(const std::string& path) = 0;
      virtual std::string basename(const std::string& path, const std::optional<std::string>& ext) = 0;
      virtual std::string extname(const std::string& path) = 0;
      virtual std::shared_ptr<Promise<void>> uploadFile(const NitroFile& file, const NitroUploadOptions& uploadOptions, const std::optional<std::function<void(double /* uploadedBytes */, double /* totalBytes */)>>& onProgress) = 0;
      virtual std::shared_ptr<Promise<NitroFile>> downloadFile(const std::string& serverUrl, const std::string& destinationPath, const std::optional<std::function<void(double /* downloadedBytes */, double /* totalBytes */)>>& onProgress) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "NitroFS";
  };

} // namespace margelo::nitro::nitrofs
